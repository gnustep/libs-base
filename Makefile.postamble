#  -*-makefile-gmake-*-
#  Makefile.postamble
#
#  Copyright (C) 1997 Free Software Foundation, Inc.
#
#  Author: Scott Christley <scottc@net-community.com>
#
#  This file is part of the GNUstep Base Library.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation; either
#  version 2 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public
#  License along with this library; see the file COPYING.LIB.
#  If not, write to the Free Software Foundation,
#  31 Milk Street #960789 Boston, MA 02196 USA.

#
#   Makefile.postamble
#
#   Project specific makefile rules
#
#   Uncomment the targets you want.
#   The double colons (::) are important, do not make them single colons
#   otherwise the normal makefile rules will not be performed.
#

# Things to do before compiling
# Automatically run ./configure if needed to generate the makefiles
# which we need in order to do our job.  If you need any special
# argument to ./configure, you can't rely on this rule, and you must
# always run ./configure manually.
before-all:: config.mak base.make
ifeq ($(_have_makefiles),)
	./configure
# The prerequisites have been generated but there are no SUBPROJECTS
# defined because _have_makefiles has been defined to the empty string
# when make was invoked initially.  Force make to reread the makefiles
# in order to continue with the compilation.
	$(MAKE)
endif

# Things to do after compiling
# after-all::

$(DESTDIR)$(GNUSTEP_MAKEFILES)/Additional:
	$(ECHO_CREATING)$(MKDIRS) $(DESTDIR)$(GNUSTEP_MAKEFILES)/Additional$(END_ECHO)

# Things to do before installing
before-install:: $(DESTDIR)$(GNUSTEP_MAKEFILES)/Additional
	$(ECHO_NOTHING)$(INSTALL_DATA) base.make \
	    $(DESTDIR)$(GNUSTEP_MAKEFILES)/Additional/base.make$(END_ECHO)

# Things to do after installing
# after-install::

# Things to do before uninstalling
# before-uninstall::

# Things to do after uninstalling
after-uninstall::
	$(ECHO_NOTHING)rm -f $(DESTDIR)$(GNUSTEP_MAKEFILES)/Additional/base.make$(END_ECHO)

# Things to do before cleaning
# before-clean::

# Things to do after cleaning
# after-clean::

# Things to do before distcleaning
# before-distclean::

# Things to do after distcleaning
after-distclean::
	$(ECHO_NOTHING)\
	rm -f config.status config.log config.cache TAGS config.mak base.make \
	        Headers/GNUstepBase/config.h \
		Headers/GNUstepBase/GSConfig.h \
	$(END_ECHO)

# Things to do before checking
# before-check::

# Things to do after checking
# after-check::

# If the generated makefiles are present but their prerequisites have
# changed, let config.status regenerate them.  This is much faster and
# equally safe than running configure again, provided that configure
# has not been modified.  Make sure to handle that case too.
ifeq ($(_have_makefiles),yes)
config.mak: config.status config.mak.in
	@./$< $@

# If Version is newer than the target, configure must be rerun so that
# its variables get AC_SUBST'ed and actually updated in base.make.
base.make:: Version
	@./configure

# Normally (Version unchanged) config.status can regenerate base.make.
base.make:: config.status base.make.in
	@./$< $@

config.status: configure
	@if [ -f $@ ]; then ./$@ --recheck; else ./$<; fi
else
# The makefiles are missing and will be generated by config.status.
config.mak base.make: ;
endif
