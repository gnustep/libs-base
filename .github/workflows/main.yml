name: CI

on: [push, pull_request, workflow_dispatch]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Ubuntu GCC
            library-combo: gnu-gnu-gnu
            CC: gcc
            CXX: g++

          - name: Ubuntu Clang gnustep-1.9
            library-combo: ng-gnu-gnu
            runtime-version: gnustep-1.9
            CC: clang
            CXX: clang++

          - name: Ubuntu Clang gnustep-1.9 disable-mixedabi
            library-combo: ng-gnu-gnu
            runtime-version: gnustep-1.9
            configure-opts: --disable-mixedabi
            CC: clang
            CXX: clang++

          - name: Ubuntu Clang gnustep-2.0
            library-combo: ng-gnu-gnu
            runtime-version: gnustep-2.0
            CC: clang
            CXX: clang++

          - name: Ubuntu Clang gnustep-2.0 disable-mixedabi
            library-combo: ng-gnu-gnu
            runtime-version: gnustep-2.0
            configure-opts: --disable-mixedabi
            CC: clang
            CXX: clang++

          - name: Windows GCC MinGW-w64 i686
            allow-test-failures: true
            library-combo: gnu-gnu-gnu
            configure-opts: --without-unwind
            os: windows-latest
            arch: i686
            msystem: mingw32
            shell: msys2 {0}
            CC: gcc
            CXX: g++

          - name: Windows GCC MinGW-w64 x86_64
            allow-test-failures: true
            library-combo: gnu-gnu-gnu
            configure-opts: --without-unwind
            os: windows-latest
            arch: x86_64
            msystem: mingw64
            shell: msys2 {0}
            CC: gcc
            CXX: g++

    env:
      SRC: ${{ github.workspace }}/source
      DEP_SRC: ${{ github.workspace }}/dependency_source
      DEP_ROOT: ${{ github.workspace }}/staging
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      LIBRARY_COMBO: ${{ matrix.library-combo }}
      RUNTIME_VERSION: ${{ matrix.runtime-version }}
      CONFIGURE_OPTS: ${{ matrix.configure-opts }}
      # MSYS2: disable conversion to native-form paths when configuring GNUstep Make
      # https://www.msys2.org/wiki/Porting/#filesystem-namespaces
      MSYS2_ARG_CONV_EXCL: --prefix=

    defaults:
      run:
        shell: ${{ matrix.shell || 'bash' }}
        working-directory: ${{ env.SRC }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.SRC }}

      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          PACKAGES="cmake pkg-config libgnutls28-dev libffi-dev libicu-dev libxml2-dev libxslt1-dev libssl-dev libavahi-client-dev zlib1g-dev gnutls-bin"
          case $LIBRARY_COMBO in
            gnu-gnu-gnu)
              # GCC Objective-C runtime
              PACKAGES="$PACKAGES libobjc-9-dev libblocksruntime-dev gobjc"
              ;;
            ng-gnu-gnu)
              # packages for libdispatch
              PACKAGES="$PACKAGES libkqueue-dev libpthread-workqueue-dev"
              # gnustep-2.0 runtime requires ld.gold or lld
              if [ "$RUNTIME_VERSION" = "gnustep-2.0" ]; then
                sudo update-alternatives --install "/usr/bin/ld" "ld" "/usr/bin/ld.gold" 10
              fi
              ;;
          esac

          sudo apt-get update
          sudo apt-get install $PACKAGES

      - name: Set up MSYS2 (Windows)
        uses: msys2/setup-msys2@v2
        if: runner.os == 'Windows'
        with:
          msystem: ${{ matrix.msystem }}
          install: >
            git
            make
            pkg-config
            libxml2-devel
            libxslt-devel
            libffi-devel
            libgnutls-devel
            icu-devel
            mingw-w64-${{matrix.arch}}-gcc-objc
            mingw-w64-${{matrix.arch}}-pkg-config
            mingw-w64-${{matrix.arch}}-libxml2
            mingw-w64-${{matrix.arch}}-libxslt
            mingw-w64-${{matrix.arch}}-libffi
            mingw-w64-${{matrix.arch}}-gnutls
            mingw-w64-${{matrix.arch}}-icu

      - name: Set environment variables (Windows)
        if: runner.os == 'Windows'
        run: |
          # convert Windows paths to Unix paths for MSYS2 shell
          echo "DEP_SRC=`cygpath -u $DEP_SRC`" >> $GITHUB_ENV
          echo "DEP_ROOT=`cygpath -u $DEP_ROOT`" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          ./.github/scripts/dependencies.sh

      - name: Build source
        run: |
          . $DEP_ROOT/share/GNUstep/Makefiles/GNUstep.sh
          ./configure $CONFIGURE_OPTS
          make && make install

      - name: Run tests
        continue-on-error: ${{ matrix.allow-test-failures || false }}
        run: |
          . $DEP_ROOT/share/GNUstep/Makefiles/GNUstep.sh
          make check

      - name: Upload logs
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Logs - ${{ matrix.name }}
          path: |
            $SRC/config.log
            $SRC/Tests/tests.log
